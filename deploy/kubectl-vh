#!/bin/bash

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

DEPLOY_FLOTTA="${DEPLOY_FLOTTA:-false}"

if [ "$#" -lt 2 ] && [ "$1" != "psql" ]; then
    echo "Usage: $(basename $0) create|delete|print-join|merge-kubeconfig|delete-kubeconfig|print-kubeconfig|psql <vh name>"
    echo " env variables: HOST_IP, EXTERNAL_IP, DEPLOY_FLOTTA"
    exit
fi

CMD=$1
name=$2

get_current_kubeconfig() {
  if [ -z ${KUBECONFIG} ]; then
    echo ${HOME}/.kube/config
  else
    echo ${KUBECONFIG}
  fi   
}

check_is_ocp() {
  kubectl get routes.route.openshift.io &> /dev/null
  if [ "$?" -eq 0 ]; then
    echo "true"
  else
    echo "false"
  fi    
}

validate_context() {
  CTX=$(kubectl config current-context)
  while true; do
    read -p "Is your current context \"$CTX\" the VH Host context? [y/n]: " yn
    case $yn in
        [Yy]* ) echo "0"; break;;
        [Nn]* ) echo "-1"; break;;
        * ) echo "-1";;
    esac
done
}

validate_external_ip() {
if [ -z "$EXTERNAL_IP" ]; then
  while true; do
    read -p "EXTERNAL_IP env variable not set. Do you wish to proceed without an external IP? [y/n]: " yn
    case $yn in
        [Yy]* ) echo "0"; break;;
        [Nn]* ) echo "-1"; break;;
        * ) echo "-1";;
    esac
  done
else
  echo "0"
fi  
}

validate_ip(){
case "$OSTYPE" in
    darwin*)  IP=$(ipconfig getifaddr en0) ;; 
    linux*)   IP=$(ip -o route get to 8.8.8.8 | sed -n 's/.*src \([0-9.]\+\).*/\1/p') ;;
    *)        echo "unknown: $OSTYPE" ;;
esac  
if [ -z "$HOST_IP" ]; then
  while true; do
      read -p "HOST_IP env var not set, discovered $IP; do you want to use this value? [y/n]: " yn
      case $yn in
          [Yy]* ) echo "$IP";  break;;
          [Nn]* ) echo "-1"; break;;
          * ) echo "-1";;
      esac
  done
fi
}

case $CMD in
  create)
    is_ocp=$(check_is_ocp)
    if [ "$is_ocp"  == "false" ]; then
      HOST_IP="${HOST_IP:-$(validate_ip)}"
      if [ "$HOST_IP" == -1 ]; then
        echo "set the env variable for HOST_IP"
        exit
      fi 
      rc=$(validate_external_ip)
      if [ "$rc" != "0" ]; then
        exit
      fi  
      if [ "$name" != "vks1" ] && [ "$name" != "vks2" ] && [ "$name" != "vks3" ]; then
        echo "name must be one of {'vks1','vks2','vks3'}"
        exit -1
      fi
    else
      echo "OpenShift detected. Routes will be used to access vh."
      kubectl apply -f ${SCRIPT_DIR}/job/manifests/0000_00_vksjob-roles-bindings-ocp.yaml
    fi  
    echo "creating vh $name with HOST_IP=$HOST_IP, EXTERNAL_IP=$EXTERNAL_IP and DEPLOY_FLOTTA=$DEPLOY_FLOTTA"
    kubectl apply -f ${SCRIPT_DIR}/job/manifests/0000_00_vksjob-sa.yaml
    kubectl apply -f ${SCRIPT_DIR}/job/manifests/0000_00_vksjob-roles-bindings.yaml
    sed "s/{{ .vksName }}/${name}/g; s/{{ .hostIP }}/${HOST_IP}/g; s/{{ .externalIP }}/${EXTERNAL_IP}/g; s/{{ .deployFlotta }}/${DEPLOY_FLOTTA}/g" \
	  ${SCRIPT_DIR}/job/templates/vksjob.yaml | kubectl apply -f -
    exit
    ;;
  delete)
    echo "deleting ${name}..."
    kubectl delete ns ${name}-system &>/dev/null
    kubectl delete job ${name}-job &>/dev/null
    kubectl delete pod mypsql-postgresql-client --namespace vks-system &>/dev/null
    POSTGRES_PASSWORD=$(kubectl get secret --namespace vks-system mypsql-postgresql -o jsonpath="{.data.postgres-password}" | base64 --decode)
    kubectl run mypsql-postgresql-client --rm --tty -i --restart='Never' --namespace vks-system --image docker.io/bitnami/postgresql:11.14.0-debian-10-r28 --env="PGPASSWORD=$POSTGRES_PASSWORD" --command -- dropdb --host mypsql-postgresql -U postgres -e -p 5432 ${name}
    exit
    ;;
  print-join)
    kubectl get cm -n ${name}-system join-command -o jsonpath='{.data.join-cmd}'  
    ;;
  merge-kubeconfig)
    KC=$(get_current_kubeconfig)
    rc=$(validate_context)
    if [ "$rc" != 0 ]; then
      exit
    fi  
    cp ${KC} ${KC}.bak
    kubectl config unset users.${name}-admin &> /dev/null
    kubectl config unset contexts.${name} &> /dev/null
    kubectl config unset clusters.${name} &> /dev/null
    kubectl get secrets -n ${name}-system admin-kubeconfig -o jsonpath='{.data.admin\.kubeconfig}' | base64 -d > /tmp/${name}
    KUBECONFIG=${KC}:/tmp/${name} kubectl config view --flatten > /tmp/config
    mv /tmp/config ${KC} 
    rm ${KC}.bak
    exit
    ;;
  delete-kubeconfig)
    kubectl config unset users.${name}-admin
    kubectl config unset contexts.${name}
    kubectl config unset clusters.${name}
    exit
    ;;
  print-kubeconfig)
    kubectl get secrets -n ${name}-system admin-kubeconfig -o jsonpath='{.data.admin\.kubeconfig}' | base64 -d
    exit
    ;;
  psql)
    kubectl delete pod mypsql-postgresql-client --namespace vks-system &>/dev/null
    POSTGRES_PASSWORD=$(kubectl get secret --namespace vks-system mypsql-postgresql -o jsonpath="{.data.postgres-password}" | base64 --decode)
    kubectl run mypsql-postgresql-client --rm --tty -i --restart='Never' --namespace vks-system --image docker.io/bitnami/postgresql:11.14.0-debian-10-r28 --env="PGPASSWORD=$POSTGRES_PASSWORD" --command -- psql --host mypsql-postgresql -U postgres -d postgres -p 5432
    exit
    ;;    
  *)
    echo "Unknown command"
    exit -1
    ;;
esac
